//寻找旋转数组最小元素（有重复）
int findMin(vector<int> &nums)
{
    int l = 0, r = nums.size() - 1, mid;
    while (l <= r)
    {
        mid = (l + r) / 2;
        if (nums[mid] > nums[r])
            l = mid + 1;
        else if (nums[mid] < nums[r])
            r = mid;
        else
            r = r - 1;
    }
    return nums[l];
}

//有序数组中的单一元素
int singleNonDuplicate(vector<int> &nums)
{
    int l = 0, r = nums.size() - 1, mid;
    while (l < r)
    {
        mid = (l + r) / 2;
        if (mid % 2 == 0)
        {
            if (nums[mid] == nums[mid + 1])
                l = mid + 1;
            else
                r = mid;
        }
        else
        {
            if (nums[mid] == nums[mid - 1])
                l = mid + 1;
            else
                r = mid;
        }
    }
    return nums[l];
}

//前k个高频元素
vector<int> topKFrequent(vector<int> &nums, int k)
{
    unordered_map<int, int> counts;
    int size = 0;
    vector<int> ans;
    for (const int &a : nums)
    {
        ++counts[a];
    }
    vector<pair<int, int>> map_vec(counts.begin(), counts.end());
    sort(map_vec.begin(), map_vec.end(), [](const pair<int, int> &a, const pair<int, int> &b)
         { return a.second > b.second; });
    for (const auto &a : map_vec)
    {
        if (size == k)
            break;
        ans.push_back(a.first);
        ++size;
    }
    return ans;
}
