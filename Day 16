//寻找旋转数组最小元素（有重复）
int findMin(vector<int> &nums)
{
    int l = 0, r = nums.size() - 1, mid;
    while (l <= r)
    {
        mid = (l + r) / 2;
        if (nums[mid] > nums[r])
            l = mid + 1;
        else if (nums[mid] < nums[r])
            r = mid;
        else
            r = r - 1;
    }
    return nums[l];
}

//有序数组中的单一元素
int singleNonDuplicate(vector<int> &nums)
{
    int l = 0, r = nums.size() - 1, mid;
    while (l < r)
    {
        mid = (l + r) / 2;
        if (mid % 2 == 0)
        {
            if (nums[mid] == nums[mid + 1])
                l = mid + 1;
            else
                r = mid;
        }
        else
        {
            if (nums[mid] == nums[mid - 1])
                l = mid + 1;
            else
                r = mid;
        }
    }
    return nums[l];
}
