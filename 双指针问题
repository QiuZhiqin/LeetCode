//非递减数列
bool checkPossibility(vector<int> &nums)
{
    int n = nums.size();
    for (int i = 0; i < n - 1; i++)
    {
        int l = nums[i], r = nums[i + 1];
        if (l > r)
        {
            nums[i] = r;
            if (is_sorted(nums.begin(), nums.end()))
                return true;
            nums[i] = l;
            nums[i + 1] = l;
            return is_sorted(nums.begin(), nums.end());
        }
    }
    return true;
}
//两数之和（数组有序）
vector<int> twoSum(vector<int> &numbers, int target)
{
    vector<int> ans;
    int i = 0, j = numbers.size() - 1;
    while (i < j)
    {
        if (numbers[i] + numbers[j] == target)
        {
            ans.push_back(i);
            ans.push_back(j);
            return ans;
        }
        if (numbers[i] + numbers[j] < target)
            i++;
        else
            j--;
    }
    return ans;
}

//环形链表（哈希表法）
ListNode *detectCycle(ListNode *head)
{
    unordered_multiset<ListNode *> count;
    ListNode *p = head;
    while (p)
    {
        if (count.find(p) == count.end())
        {
            count.insert(p);
            p = p->next;
        }
        else
            return p;
    }
    return NULL;
}

//环形链表（快慢指针）
ListNode *detectCycle(ListNode *head)
{
    ListNode *fast = head, *slow = head;
    do
    {
        if (!fast || !fast->next)
            return NULL;
        fast = fast->next->next;
        slow = slow->next;
    } while (fast != slow);
    fast = head;
    while (fast != slow)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return fast;
}

//最小覆盖子串
string minWindow(string s, string t)
{
    unordered_set<char> flag;
    unordered_map<char, int> chars;
    for (const char &a : t)
    {
        flag.insert(a);
        chars[a]++;
    }
    int n = s.size();
    int l = 0, min_size = s.size() + 1, min_l = 0, cnt = 0;
    for (int r = 0; r < n; r++)
    {
        if (flag.count(s[r]))
            if (--chars[s[r]] >= 0)
                ++cnt;
        while (cnt == t.size())
        {
            if (r - l + 1 < min_size)
            {
                min_l = l;
                min_size = r - l + 1;
            }
            if (flag.count(s[l]) && ++chars[s[l]] > 0)
                --cnt;
            ++l;
        }
    }
    return min_size > n ? "" : s.substr(min_l, min_size);
}

//两数平方之和
bool judgeSquareSum(int c)
{
    unsigned sml = 0, big = sqrt(c);
    while (sml <= big)
    {
        unsigned corrent = sml * sml + big * big;
        if (corrent == c)
            return true;
        if (corrent > c)
            --big;
        else
            ++sml;
    }
    return false;
}

//验证回文串
bool isPalindrome(string s)
{
    string sgood;
    for (const char &c : s)
    {
        if (isalnum(c))
            sgood.push_back(tolower(c));
    }
    int n = sgood.size();
    for (int i = 0, j = n - 1; i < j; i++, j--)
    {
        if (sgood[i] != sgood[j])
            return false;
    }
    return true;
}

//验证回文子串（可删除一个元素）
class Solution {
public:
   bool checkPalindrome(const string &s, int low, int high)
{
    while (low < high)
    {
        if (s[low] != s[high])
            return false;
        ++low;
        --high;
    }
    return true;
}
bool validPalindrome(string s)
{
    int n = s.size();
    for (int i = 0, j = n - 1; i < j; i++, j--)
    {
        if (s[i] != s[j])
            return checkPalindrome(s, i + 1, j) || checkPalindrome(s, i, j - 1);
    }
    return true;
}
};

//删除字母匹配
//如果答案不止一个，返回长度最长且字母序最小的字符串。如果答案不存在，则返回空字符串。
int compare(const string &s, const string &t)
{
    int k = 0, s_size = s.size(), t_size = t.size();
    int i = 0, j = 0;
    while (i < s_size && j < t_size)
    {
        if (s[i] != t[j])
            ++i;
        else
        {
            ++i;
            ++j;
            ++k;
        }
    }
    if (k == t_size)
    {
        return k;
    }
    else
        return 0;
}
string findLongestWord(string s, vector<string> &dictionary)
{
    int n = dictionary.size(), max_size = 0, min_total = 0;
    string ans;
    for (int i = 0; i < n; i++)
    {
        int a = compare(s, dictionary[i]);
        if (max_size < a)
        {
            max_size = a;
            ans.assign(dictionary[i]);
        }
        else if (max_size == a && ans.compare(dictionary[i]) > 0)
        {
            ans.assign(dictionary[i]);
        }
    }
    return ans;
}
