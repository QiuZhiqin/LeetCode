//验证二叉搜索树（408真题）
class Solution {
public:
   bool f1(TreeNode *root, long low, long high)
{
    if (!root)
        return true;
    if (root->val <=low || root->val >= high)
        return false;
    return f1(root->left, low, root->val) && f1(root->right, root->val, high);
}
bool isValidBST(TreeNode *root)
{
    return f1(root, LONG_MIN, LONG_MAX);
}

//删除指定值的元素
    int removeElement(vector<int> &nums, int val)
{
    int k = 0;
    for (int i = 0; i < nums.size(); i++)
    {
        if (nums[i] != val)
        {
            nums[k] = nums[i];
            k++;
        }
    }
    return k;
}

//分发饼干
int findContentChildren(vector<int> &g, vector<int> &s)
{
    int child = 0;
    sort(g.begin(), g.end());
    sort(s.begin(), s.end());
    for (int i = 0; i < s.size(); i++)
    {
        if (child == g.size())
            break;
        if (g[child] <= s[i])
            child++;
    }
    return child;
}

//发放糖果
 int candy(vector<int> &ratings)
{
    int size = ratings.size();
    vector<int> nums(size, 1);
    if (size <= 1)
        return size;
    for (int i = 1; i < size; i++)
    {
        if (ratings[i - 1] < ratings[i])
            nums[i] = nums[i - 1] + 1;
    }
    for (int i = size - 1; i > 0; i--)
    {
        if (ratings[i] < ratings[i - 1] && nums[i] >= nums[i - 1])
            nums[i - 1] = nums[i] + 1;
    }
    return accumulate(nums.begin(), nums.end(), 0);
}

//划分字母区间
vector<int> partitionLabels(string s)
{
    vector<int> ans;
    unordered_map<char, int> last;
    int size = s.size();
    int l = 0, r = 0;
    for (int i = 0; i < size; i++)
    {
        last[s[i]] = i;
    }
    for (int i = 0; i < size; i++)
    {
        r = max(r, last[s[i]]);
        if (r == i)
        {
            ans.push_back(r - l + 1);
            l = r + 1;
        }
    }
    return ans;
}

//买卖股票
int maxProfit(vector<int> &prices)
{
    int ans = 0;
    int size = prices.size();
    for (int i = 1; i < size; i++)
    {
        ans += max(0, prices[i] - prices[i - 1]);
    }
    return ans;
}

//无重叠区间
int eraseOverlapIntervals(vector<vector<int>> &intervals)//贪心算法，先将各区间按结尾从小到大排序，再遍历比较，如果前一个区间结尾比后一个的开头大，则移除后面一个区间
{
    if (intervals.empty())
        return 0;
    int n = intervals.size();
    sort(intervals.begin(), intervals.end(), [](const vector<int> &a, const vector<int> &b)
         { return a[1] < b[1]; });                       //按区间结尾从小到大排序
    int ans = 0, pre = intervals[0][1];
    for (int i = 1; i < n; i++)
    {
        if (intervals[i][0] < pre)
            ans++;
        else
            pre = intervals[i][1];
    }
    return ans;
}

//种花问题
bool canPlaceFlowers(vector<int> &flowerbed, int n)
{
    int max = 0, pre = 0, size = flowerbed.size();
    for (int i = 0; i < size - 1; i++)                  //判断除最后一个格外的格子是否适合种花
    {
        if (flowerbed[i] == 0 && pre == 0 && flowerbed[i + 1] == 0)
        {
            max++;
            flowerbed[i] = 1;
        }
        pre = flowerbed[i];
    }
    if (flowerbed[size - 1] == 0 && pre == 0)           //判断最后一格是否适合种花
        max++;
    if (max >= n)
        return true;
    else
        return false;
}
//用最少的箭射气球
int findMinArrowShots(vector<vector<int>> &points)
{
    if (points.empty())
        return 0;
    int size = points.size();
    sort(points.begin(), points.end(), [](const vector<int> &a, const vector<int> &b)
         { return a[1] < b[1]; });
    int pos = points[0][1], arrow = 1;                  //射的点一定在某个气球的右边界
    for (const vector<int>& balloon: points) {
            if (balloon[0] > pos) {
                pos = balloon[1];
                ++arrow;
            }
        }
    return arrow;
}
