//判断链表是否有环
bool hasCycle(ListNode *head)
{
    unordered_set<ListNode *> seen;
    ListNode *p = head;
    while (p != NULL && p->next != NULL)
    {
        auto it = seen.find(p);
        if (it != seen.end())
            return true;
        seen.insert(p);
        p = p->next;
    }
    return false;
}

//合并两个有序链表
ListNode *mergeTwoLists(ListNode *list1, ListNode *list2)
{
    ListNode *p = list1, *q = list2;
    ListNode *s = new ListNode(), *r = s;
    s->next = NULL;
    while (p != NULL && q != NULL)
    {
        ListNode *temp = new ListNode();
        if (p->val <= q->val)
        {
            temp->val = p->val;
            temp->next = NULL;
            p = p->next;
        }
        else
        {
            temp->val = q->val;
            temp->next = NULL;
            q = q->next;
        }
        r->next = temp;
        r = r->next;
    }
    if (p == NULL)
    {
        r->next = q;
    }
    else if (q == NULL)
    {
        r->next = p;
    }
    return s->next;
}

//删除链表元素
ListNode *removeElements(ListNode *head, int val)
{
    ListNode *a = new ListNode();
    a->next = head;
    ListNode *pre = a, *p = a->next;
    while (p != NULL)
    {
        if (p->val == val)
            pre->next = p->next;

        else
            pre = p;
        p = p->next;
    }
    return a->next;
}

//反转链表
  ListNode *reverseList(ListNode *head)
{
    ListNode *pre = NULL, *p = head;
    while (p != NULL)
    {
        ListNode *next = p->next;
        p->next = pre;
        pre = p;
        p= next;
    }
    return pre;
}

//删除重复元素
ListNode *deleteDuplicates(ListNode *head)
{
    if (head == NULL)
        return NULL;
    ListNode *p = head, *q = head;
    while (p != NULL)
    {
        if (q->val == p->val)
            p = p->next;
        else
        {
            q->next = p;
            q = q->next;
        }
    }
    q->next = p;
    return head;
}
