//x的平方根
int mySqrt(int x)
{
    if (x < 2)
        return x;
    int l = 1, r = x / 2, mid, sqrt;
    while (l <= r)
    {
        mid = (l + r) / 2;
        sqrt = x / mid;
        if (sqrt == mid)
            return mid;
        else if (sqrt > mid)
            l = mid + 1;
        else
            r = mid - 1;
    }
    return r;
}

//排序数组查找元素出现首位和最后一位（二分）
int firstmatch(const vector<int> &nums, int target)
{
    int l = 0, r = nums.size(), mid;
    while (l < r)
    {
        mid = (l + r) / 2;
        if (nums[mid] >= target)
            r = mid;
        else
            l = mid + 1;
    }
    return l;
}

//搜索旋转排序数组（无重复元素）
vector<int> searchRange(vector<int> &nums, int target)
{
    int fir, las;
    fir = firstmatch(nums, target);
    las = firstmatch(nums, target + 1);
    if (fir==nums.size()||nums[fir] != target)
        return {-1, -1};
    else
        return {fir, las - 1};
}

//排序旋转数组搜索
bool search(vector<int> &nums, int target)
{
    int low = 0, high = nums.size() - 1, mid;
    while (low <= high)
    {
        mid = (low + high) / 2;
        if (nums[mid] == target)
            return true;
        else if (nums[low] == nums[mid])               //无法判断有序区间
            ++low;
        else if (nums[low] < nums[mid])                //左侧有序
        {
            if (nums[mid] > target&&target>=nums[low])
                high = mid - 1;
            else
                low = mid + 1;
        }
        else                                           //右侧有序
        {
            if (nums[mid] < target&&target<=nums[high])
                low = mid + 1;
            else
                high = mid - 1;
        }
    }
    return false;
}

//寻找旋转排序数组中的最小值
int findMin(vector<int> &nums)
{
    int low = 0, high = nums.size() - 1, mid;
    while (low < high)
    {
        mid = (low + high) / 2;
        if (nums[mid] > nums[high])
            low = mid + 1;
        else
            high = mid;
    }
    return nums[high];
}
};

//寻找旋转数组最小元素（有重复）
int findMin(vector<int> &nums)
{
    int l = 0, r = nums.size() - 1, mid;
    while (l <= r)
    {
        mid = (l + r) / 2;
        if (nums[mid] > nums[r])
            l = mid + 1;
        else if (nums[mid] < nums[r])
            r = mid;
        else
            r = r - 1;
    }
    return nums[l];
}

//有序数组中的单一元素
int singleNonDuplicate(vector<int> &nums)
{
    int l = 0, r = nums.size() - 1, mid;
    while (l < r)
    {
        mid = (l + r) / 2;
        if (mid % 2 == 0)
        {
            if (nums[mid] == nums[mid + 1])
                l = mid + 1;
            else
                r = mid;
        }
        else
        {
            if (nums[mid] == nums[mid - 1])
                l = mid + 1;
            else
                r = mid;
        }
    }
    return nums[l];
}

//搜索二维矩阵
bool searchMatrix(vector<vector<int>> &matrix, int target)
{
    if (!matrix.size())
        return false;
    int m = matrix.size(), n = matrix[0].size();
    int left = 0, right = n - 1, mid;
    while (left < right) //第一次折半，确定left列及以后均大于target
    {
        mid = (left + right) / 2;
        if (matrix[0][mid] > target)
            right = mid - 1;
        else if (matrix[0][mid] < target)
            left = mid + 1;
        else
            return true;
    }
    for (int i = 0; i < left; i++)
    {
        int low = 0, high = m - 1;
        while (low < high) //对每列进行折半查找
        {
            mid = (low + high) / 2;
            if (matrix[mid][i] > target)
                high = mid - 1;
            else if (matrix[mid][i] < target)
                low = mid + 1;
            else
                return true;
        }
    }
    return false;
}
//法二（更优秀）
bool searchMatrix(vector<vector<int>> &matrix, int target)
{
    if (!matrix.size())
        return false;
    int m = matrix.size(), n = matrix[0].size();
    int r = m - 1, c = 0;
    while (r >= 0 && c < n)
    {
        if (matrix[r][c] > target) //左下元素比target大，因为同行元素均比左下元素大，故舍弃最后一行
            --r;
        else if (matrix[r][c] < target) //因为同列元素均比左下元素小，故舍弃第一列
            ++c;
        else
            return true;
    }
    return false;
}

//769.最多能完成排序的块
int maxChunksToSorted(vector<int> &arr)
{
    int chunks = 0, cur_max = 0;
    for (int i = 0; i < arr.size(); ++i)
    {
        cur_max = max(cur_max, arr[i]);
        if (cur_max == i)
        {
            ++chunks;
        }
    }
    return chunks;
}
