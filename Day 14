//非递减数列
bool checkPossibility(vector<int> &nums)
{
    int n = nums.size();
    for (int i = 0; i < n - 1; i++)
    {
        int l = nums[i], r = nums[i + 1];
        if (l > r)
        {
            nums[i] = r;
            if (is_sorted(nums.begin(), nums.end()))
                return true;
            nums[i] = l;
            nums[i + 1] = l;
            return is_sorted(nums.begin(), nums.end());
        }
    }
    return true;
}
//两数之和（数组有序）
vector<int> twoSum(vector<int> &numbers, int target)
{
    vector<int> ans;
    int i = 0, j = numbers.size() - 1;
    while (i < j)
    {
        if (numbers[i] + numbers[j] == target)
        {
            ans.push_back(i);
            ans.push_back(j);
            return ans;
        }
        if (numbers[i] + numbers[j] < target)
            i++;
        else
            j--;
    }
    return ans;
}
