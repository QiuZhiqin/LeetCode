//非递减数列
bool checkPossibility(vector<int> &nums)
{
    int n = nums.size();
    for (int i = 0; i < n - 1; i++)
    {
        int l = nums[i], r = nums[i + 1];
        if (l > r)
        {
            nums[i] = r;
            if (is_sorted(nums.begin(), nums.end()))
                return true;
            nums[i] = l;
            nums[i + 1] = l;
            return is_sorted(nums.begin(), nums.end());
        }
    }
    return true;
}
//两数之和（数组有序）
vector<int> twoSum(vector<int> &numbers, int target)
{
    vector<int> ans;
    int i = 0, j = numbers.size() - 1;
    while (i < j)
    {
        if (numbers[i] + numbers[j] == target)
        {
            ans.push_back(i);
            ans.push_back(j);
            return ans;
        }
        if (numbers[i] + numbers[j] < target)
            i++;
        else
            j--;
    }
    return ans;
}

//环形链表（哈希表法）
ListNode *detectCycle(ListNode *head)
{
    unordered_multiset<ListNode *> count;
    ListNode *p = head;
    while (p)
    {
        if (count.find(p) == count.end())
        {
            count.insert(p);
            p = p->next;
        }
        else
            return p;
    }
    return NULL;
}

//环形链表（快慢指针）
ListNode *detectCycle(ListNode *head)
{
    ListNode *fast = head, *slow = head;
    do
    {
        if (!fast || !fast->next)
            return NULL;
        fast = fast->next->next;
        slow = slow->next;
    } while (fast != slow);
    fast = head;
    while (fast != slow)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return fast;
}

//最小覆盖子串
string minWindow(string s, string t)
{
    unordered_set<char> flag;
    unordered_map<char, int> chars;
    for (const char &a : t)
    {
        flag.insert(a);
        chars[a]++;
    }
    int n = s.size();
    int l = 0, min_size = s.size() + 1, min_l = 0, cnt = 0;
    for (int r = 0; r < n; r++)
    {
        if (flag.count(s[r]))
            if (--chars[s[r]] >= 0)
                ++cnt;
        while (cnt == t.size())
        {
            if (r - l + 1 < min_size)
            {
                min_l = l;
                min_size = r - l + 1;
            }
            if (flag.count(s[l]) && ++chars[s[l]] > 0)
                --cnt;
            ++l;
        }
    }
    return min_size > n ? "" : s.substr(min_l, min_size);
}
