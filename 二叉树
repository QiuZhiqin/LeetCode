//判断二叉树是否对称
class Solution
{
public:
    bool check(TreeNode *p, TreeNode *q)
    {
        if (!p && !q)
            return true;
        if (!p || !q)
            return false;
        return p->val == q->val && check(p->left, q->right) && check(p->right, q->left);//p的左孩子与q的右孩子应该相等
    }
    bool isSymmetric(TreeNode *root)
    {
        return check(root, root);
    }
};

//层序遍历
vector<vector<int>> levelOrder(TreeNode *root)
{
    vector<vector<int>> ans;
    queue<TreeNode *> temp;
    if (!root)
        return ans;
    temp.push(root);
    while (!temp.empty())
    {
        int levelsize = temp.size();
        ans.push_back(vector<int>{});
        for (int i = 0; i < levelsize; i++)
        {
            auto node = temp.front();
            temp.pop();
            ans.back().push_back(node->val);
            if (node->left)
                temp.push(node->left);
            if (node->right)
                temp.push(node->right);
        }
    }
    return ans;
}

//翻转二叉树
class Solution
{
public:
    void invert(TreeNode *&root)
    {
        if (!root)
            return;
        TreeNode *temp = root->left;
        root->left = root->right;
        root->right = temp;
        invert(root->right);
        invert(root->left);
    }
    TreeNode *invertTree(TreeNode *root)
    {
        invert(root);
        return root;
    }
};
//找路径总和
class Solution
{
public:
    bool path(TreeNode *root, int targetSum, int correntSum)
    {
        if (!root)
            return false;
        correntSum = correntSum + root->val;
        if (!root->left && !root->right)//加上这句是为了确定root为叶子节点，去掉这句程序也能运行，不过路径不一定连接叶子节点
            return correntSum == targetSum;
        return path(root->left, targetSum, correntSum) || path(root->right, targetSum, correntSum);
    }
    bool hasPathSum(TreeNode *root, int targetSum)
    {
        int correntSum = 0;
        return path(root, targetSum, correntSum);
    }
};

//二叉搜索树的查找
TreeNode *searchBST(TreeNode *root, int val)
{
    if (!root)
        return nullptr;
    if (root->val == val)
        return root;
    if (root->val < val)
        return searchBST(root->right, val);
    else
        return searchBST(root->left, val);
}

//二叉搜索树的插入
class Solution {
public:
    TreeNode *search(TreeNode *root, TreeNode *pre, int val)
{
    if (!root)
        return pre;
    if (root->val < val)
        return search(root->right, root, val);
    else
        return search(root->left, root, val);
}
TreeNode *insertIntoBST(TreeNode *&root, int val)
{
    if (!root)
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        return temp;
    }
    TreeNode *insert = search(root, root, val);
    if (insert->val < val)
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        insert->right = temp;
        return root;
    }
    else
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        insert->left = temp;
        return root;
    }
}
};

//二叉搜索树里的两数之和
class Solution {
public:
    void inorder(TreeNode *root, vector<int> &nums)
{
    if (!root)
        return;
    inorder(root->left, nums);
    nums.push_back(root->val);
    inorder(root->right, nums);
}
bool findTarget(TreeNode *root, int k)
{
    vector<int> nums;
    inorder(root, nums);
    int l = 0, r = nums.size() - 1;
    while (l < r)
    {
        if (nums[l] + nums[r] == k)
            return true;
        else if (nums[l] + nums[r] < k)
            l++;
        else
            r--;
    }
    return false;
}
};

//二叉搜索树的公共祖先
//方法一（分两种情况讨论，麻烦）
class Solution {
public:
   bool searchBST(TreeNode *root, int val)//判断root下是否有val
{
    if (!root)
        return false;
    if (root->val == val)
        return true;
    if (root->val < val)
        return searchBST(root->right, val);
    else
        return searchBST(root->left, val);
}
void commonpos(TreeNode *root, TreeNode *p, TreeNode *q, TreeNode *&common)//递归遍历，若某节点下同时包含pq，修改common，这样可保证返回最后一次修改的值
{
    if (!root)
        return;
    if (searchBST(root, p->val) && searchBST(root, q->val))
        common = root;
    commonpos(root->left, p, q, common);
    commonpos(root->right, p, q, common);
}
TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
{
    if (searchBST(p, q->val))//p是q的父节点？
        return p;
    else if (searchBST(q, p->val))//q是p的父节点？
        return q;
    TreeNode *common = nullptr;
    commonpos(root, p, q, common);//若上两种情况均不满足，说明公共节点在上方，需要从根遍历
    return common;
}
};
//方法二（较优）
TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
{
    if (p->val < root->val && q->val < root->val)//若pq值均小于root，说明pq在root的左子树里
        return lowestCommonAncestor(root->left, p, q);
    else if (p->val > root->val && q->val > root->val)
        return lowestCommonAncestor(root->right, p, q);
    else//以上两种情况均不满足，说明pq分别在root两侧，结束返回当前root
        return root;
}

//二叉树前序遍历
class Solution
{
public:
    void preorder(TreeNode *root, vector<int> &ans)
    {
        if (root == nullptr)
            return;
        ans.push_back(root->val);
        preorder(root->left, ans);
        preorder(root->right, ans);
    }
    vector<int> preorderTraversal(TreeNode *root)
    {
        vector<int> ans;
        preorder(root, ans);
        return ans;
    }
};

//求二叉树深度
int maxDepth(TreeNode *root)
{
    if (root == nullptr)
        return 0;
    return max(maxDepth(root->left), maxDepth(root->right)) + 1;
}

//平衡二叉树
 bool isBalanced(TreeNode *root)
{
    if (root == NULL)
        return true;
    else
        return abs(height(root->left) - height(root->right)) <= 1 && isBalanced(root->left) && isBalanced(root->right);
}
int height(TreeNode *root)
{
    if (root == NULL)
        return 0;
    else
        return max(height(root->left), height(root->right)) + 1;
}
