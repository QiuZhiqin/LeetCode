//爬楼梯
int climbStairs(int n)
{
    if (n <= 2)
        return n;
    int pre = 2, pree = 1, cur;
    for (int i = 2; i < n; i++)
    {
        cur = pre + pree;
        pree = pre;
        pre = cur;
    }
    return cur;
}

//抢劫
int rob(vector<int> &nums)
{
    int n = nums.size();
    if (n == 1)
        return nums[0];
    if (n == 2)
        return max(nums[0], nums[1]);
    int pre = max(nums[0], nums[1]), pree = nums[0], cur;
    for (int i = 2; i < n; i++)
    {
        cur = max(pree + nums[i], pre); //两种可能：1.第i家抢，则第i-1家不抢，则最大抢劫数目为i-1家之前（不包括i-1家）抢的
        pree = pre;                     //数目总和+第i家抢到的钱;2.不抢第i家，则最大抢劫数额为到i-1家（包括）为止抢到的钱
        pre = cur;
    }
    return cur;
}

//等差数列划分
int numberOfArithmeticSlices(vector<int> &nums)
{
    int n = nums.size();
    if (n < 2)
        return 0;
    vector<int> dp(n, 0);
    for (int i = 3; i < n; i++)
    {
        if (nums[i - 1] - nums[i - 2] == nums[i] - nums[i - 1]) //判断从nums[i-2]到nums[i]的三个元素是否等差
            dp[i] = dp[i - 1] + 1;                              //若是，则相较以nums[i-1]为结尾的等差数列个数至少增加1，即(, , , ,nums[i-1])末端加上nums[i]依然等差
    }
    return accumulate(dp.begin(), dp.end(), 0); //子列可以以任意i为结尾，故需要对dp数列进行求和
}

//最小路径和
int minPathSum(vector<vector<int>> &grid)
{
    int m = grid.size(), n = grid[0].size();
    vector<vector<int>> dp(m, vector<int>(n, 0)); //建立二维dp数组来存储最小值
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (i == 0 && j == 0) //位于左上角时，最小值即为当前元素值
                dp[i][j] = grid[i][j];
            else if (i == 0) //位于第一行，只可能从左边过来
                dp[i][j] = dp[i][j - 1] + grid[i][j];
            else if (j == 0) //位于第一列，只可能从上边过来
                dp[i][j] = dp[i - 1][j] + grid[i][j];
            else
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]; //考虑从左、上靠近的最小值加上当前元素值
        }
    }
    return dp[m - 1][n - 1];
}

//最大正方形
int maximalSquare(vector<vector<char>> &matrix)
{
    int m = matrix.size(), n = matrix[0].size();
    int max_len = 0;
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0)); //这里让dp行为m+1，列为n+1是为了方便后续判断，即第一行第一列存的元素无效
    for (int i = 1; i <= m; i++)
        for (int j = 1; j <= n; j++)
        {
            if (matrix[i - 1][j - 1] == '1')
                dp[i][j] = min(dp[i - 1][j - 1], min(dp[i][j - 1], dp[i - 1][j])) + 1; //数学推导，记住即可
            max_len = max(max_len, dp[i][j]);
        }
    return max_len * max_len;
}

//完全平方数
int numSquares(int n)
{
    vector<int> dp(n + 1, INT_MAX);//用于存储组成数字i需要的最少完全平方数
    dp[0] = 0;
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j * j <= i; ++j)
        {
            dp[i] = min(dp[i], dp[i - j * j] + 1);//找到一个最少的组合，由j和dp[i-j*j]中元素组成，个数就是dp[i-j*j]+1
        }
    }
    return dp[n];
}

//解码方法
int numDecodings(string s)
{
    int n = s.length();
    if (n == 0)
        return 0;
    int prev = s[0] - '0';
    if (!prev)
        return 0;
    if (n == 1)
        return 1;
    vector<int> dp(n + 1, 1);
    for (int i = 2; i <= n; ++i)
    {
        int cur = s[i - 1] - '0';
        if ((prev == 0 || prev > 2) && cur == 0) //如果当前位是0，且组合前一位不在[0,26]之内，则无法解码，返回0
            return 0;
        if ((prev < 2 && prev > 0) || prev == 2 && cur < 7) //如果当前位与前一位组合位于[0,26]之内
        {
            if (cur) //当前位不为0，解码方式为前两位之前（本位与前一位组合）与前一位之前（本位单独参加解码）的解码方式总和
                dp[i] = dp[i - 2] + dp[i - 1];
            else //当前位为0，故解码方式为前两位（前一位与本位必须结合在一起）之前的解码方式总和
                dp[i] = dp[i - 2];
        }
        else //前一位无法与当前位组合，当前位解码方式仅有一种
            dp[i] = dp[i - 1];
        prev = cur;
    }
    return dp[n];
}

//单词拆分
bool wordBreak(string s, vector<string> &wordDict)
{
    int n = s.length();
    vector<bool> dp(n + 1, false);
    dp[0] = true; //重要
    for (int i = 1; i <= n; ++i)
    {
        for (const string &word : wordDict)
        {
            int len = word.length();
            if (i >= len && s.substr(i - len, len) == word) //取最后长为len的子串，与word比较
                dp[i] = dp[i] || dp[i - len];               // dp[i-len]中只要有一个是true就满足
        }
    }
    return dp[n];
}

//最长上升子序列
int lengthOfLIS(vector<int> &nums)
{
    int n = nums.size();
    vector<int> dp(n, 1);
    int max_size = 1;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < i; j++)
        {
            if (nums[i] > nums[j])//找到i之前比i小的的某个元素j，比较现在的序列长还是j后接上i长
                dp[i] = max(dp[i], dp[j] + 1);
        }
        max_size = max(dp[i], max_size);//更新最大长度
    }
    return max_size;
}
