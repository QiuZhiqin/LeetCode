//合并区间
vector<vector<int>> merge(vector<vector<int>> &intervals)
{
    if (intervals.size() == 0)
        return intervals;
    sort(intervals.begin(), intervals.end());
    vector<vector<int>> ans;
    for (int i = 0; i < intervals.size();)//注意此处不需要i++
    {
        int t = intervals[i][0];
        int j = i + 1;
        while (j < intervals.size() && intervals[j][0] < t)
        {
            t = max(t, intervals[j][1]);
            j++;
        }
        ans.push_back({intervals[i][0], t});
        i = j;
    }
    return ans;
}

//判断存在重复元素
bool containsDuplicate(vector<int> &nums)
{
    sort(nums.begin(), nums.end());
    int n = nums.size();
    for (int i = 0; i < n - 1; i++)
    {
        if (nums[i] == nums[i + 1])
        {
            return true;
        }
    }
    return false;
}

//最大子数组之和
int maxSubArray(vector<int> &nums)
{
    int n = int(nums.size()), result = INT_MIN, sum = 0;//此处result取得是可取的最小整数
    for (int i = 0; i < n; i++)
    {
        sum += nums[i];
        result = max(result, sum);
        if (sum < 0)
            sum = 0;
    }
    return result;
}

//至少是其他数字两倍的最大值
int dominantIndex(vector<int> &nums)
{
    int fir = INT_MIN, sec = INT_MIN;
    int firpos = 0, secpos = 0;
    int n = int(nums.size());
    for (int i = 0; i < n; i++)
    {
        if (nums[i] > fir)
        {
            fir = nums[i];
            firpos = i;
        }
    }
    for (int i = 0; i < n; i++)
    {
        if (nums[i] >= sec && nums[i] < fir)
        {
            sec = nums[i];
            secpos = i;
        }
    }
    if (secpos == firpos || fir >= sec * 2)
        return firpos;
    else
        return -1;
}

//Task 1 寻找数组中心下标
int pivotIndex(vector<int> &nums)
{
    int mid = 0, n = nums.size();
    int suml, sumr;
    while (mid < n)
    {
        sumr = 0, suml = 0;
        if (mid == 0)
        {
            suml = 0;
            for (int i = mid + 1; i < n; i++)
                sumr += nums[i];
        }
        else if (mid == n)
        {
            for (int i = 0; i < mid; i++)
                suml += nums[i];
            sumr = 0;
        }
        else
        {
            for (int i = mid + 1; i < n; i++)
                sumr += nums[i];
            for (int i = 0; i < mid; i++)
                suml += nums[i];
        }
        if (suml == sumr)
            return mid;
        mid++;
    }
    return -1;
}

//Task 2 两数之和
vector<int> twoSum(vector<int> &nums, int target)
{
    int fir = 0, sec = 0;
    vector<int> v1;
    while (fir <= nums.size() - 2)
    {
        sec = fir + 1;
        while (sec <= nums.size() - 1)
        {
            if (nums[fir] + nums[sec] != target)
                sec++;
            else if (nums[fir] + nums[sec] == target)
            {
                v1.push_back(fir);
                v1.push_back(sec);
                return v1;
            }
        }
        fir++;
    }
    return v1;
}

//Task 3 删除重复项
int removeDuplicates(vector<int> &nums)
{
    int i, j;
    int n = nums.size();
    if (n == 0)
        return 0;
    for (i = 0, j = 1; j < n; j++)
    {
        if (nums[i] != nums[j])
        {
            ++i;
            nums[i] = nums[j];
        }
    }
    return i + 1;
}

//Task 4查找插入返回下标志
int low = 0, high = nums.size() - 1, mid, n = nums.size();
    while (low <= high)//折半查找
    {
        mid = (high + low) / 2;
        if (nums[mid] == target)
            return mid;
        else if (nums[mid] > target)
            high = mid - 1;
        else
            low = mid + 1;
    }
    int j;//确定插入位置
    if (high < mid)
        j = mid;
    else
        j = low;
    nums.push_back(0);
    for (int i = n; i > j; i--)
        nums[i] = nums[i - 1];
    nums[j] = target;
    return j;
    
    //合并有序数组
void merge(vector<int> &nums1, int m, vector<int> &nums2, int n)
{
    int p1 = 0, p2 = 0;
    int sorted[m + n];
    int cur;
    while (p1 < m || p2 < n)
    {
        if (p1 == m)
            cur = nums2[p2++];
        else if (p2 == n)
            cur = nums1[p1++];
        else if (nums1[p1] <= nums2[p2])
            cur = nums1[p1++];
        else
            cur = nums2[p2++];
        sorted[p1 + p2 - 1] = cur;
    }
    for (int i = 0; i < m + n; i++)
        nums1[i] = sorted[i];
}

//最长公共前缀
string longestCommonPrefix(vector<string> &strs)
{
    int n2 = strs.size(), n1 = strs[0].size();
    string ans;
    char b;
    int a, i = 0;
    if (n2 == 0)
        return ans;
    while (i < n1)
    {
        a = 1;
        b = strs[0][i];
        for (int j = 1; j < n2; j++)
        {
            if (strs[j][i] == b)
                a++;
            else
                break;
        }
        if (a == n2)
            i++;
        else
            break;
    }
    ans.assign(strs[0], 0, i);
    return ans;
}

//两个数组的交集
vector<int> intersect(vector<int> &nums1, vector<int> &nums2)
{
    sort(nums1.begin(), nums1.end());
    sort(nums2.begin(), nums2.end());
    vector<int> ans;
    int i = 0, j = 0, s1 = nums1.size(), s2 = nums2.size();
    while (i < s1 && j < s2)
    {
        if (nums1[i] == nums2[j])
        {
            ans.push_back(nums1[i]);
            i++;
            j++;
        }
        else if (nums1[i] < nums2[j])
            i++;
        else
            j++;
    }
    return ans;
}

//斐波那契非递归
int fib(int n)
{
    int i = 2, Last = 1, NextToLast = 0, Answer;
    if (n <= 1)
        return n;
    while (i <= n)
    {
        Answer = Last + NextToLast;
        NextToLast = Last;
        Last = Answer;
        i++;
    }
    return Answer;
}

//动态规划，股票问题
int maxProfit(vector<int> &prices)
{
    int inf = 1e9;
    int minprice = inf, maxprofit = 0;
    for (int price : prices)
    {
        maxprofit = max(maxprofit, price - minprice);
        minprice = min(price, minprice);
    }
    return maxprofit;
}

//计算杨辉三角
vector<vector<int>> generate(int numRows)
{
    int i, j;
    vector<vector<int>> ans;
    if (numRows <= 0)
        return ans;
    ans.push_back({1});
    if (numRows == 1)
        return ans;
    for (int level = 1; level < numRows; level++)
    {
        vector<int> temp;
        for (i = -1, j = 0; j < level + 1; i++, j++)
        {
            if (i < 0)
                temp.push_back(ans[level - 1][j]);
            else if (j >= level)
                temp.push_back(ans[level - 1][i]);
            else
                temp.push_back(ans[level - 1][i] + ans[level - 1][j]);
        }
        ans.push_back(temp);
    }
    return ans;
}

//重塑矩阵
int m = mat.size(), n = mat[0].size();
    if (m * n != r * c)
        return mat;
    vector<int> nums;//引入一维数组按行存储
    vector<vector<int>> ans;
    int p = 0;
    for (auto val1 : mat)
    {
        for (auto val2 : val1)
            nums.push_back(val2);
    }
    for (int i = 0; i < r; i++)
    {
        vector<int> temp;//临时存储待插入的一行，按行插入ans数组
        for (int j = 0; j < c; j++)
        {
            temp.push_back(nums[p++]);
        }
        ans.push_back(temp);
    }
    return ans;
    
    //矩阵置零
void setZeroes(vector<vector<int>> &matrix)
{
    bool flagcol = false, flagrow = false;//设定两个标志位，记录第一行第一列是否有0
    int rows = matrix.size(), cols = matrix[0].size();
    for (int i = 0; i < rows; i++)//遍历第一列
    {
        if (matrix[i][0] == 0)
            flagcol = true;
    }
    for (int i = 0; i < cols; i++)//遍历第一行
    {
        if (matrix[0][i] == 0)
            flagrow = true;
    }
    for (int i = 1; i < rows; i++)//遍历整个矩阵
    {
        for (int j = 1; j < cols; j++)
        {
            if (matrix[i][j] == 0)
            {
                matrix[0][j] = 0;//用第一行记录j列是否有0
                matrix[i][0] = 0;//用第一列记录i行是否有0
            }
        }
    }
    for (int i = 1; i < cols; i++)//一定注意i从1开始，否则第一列记录也可能被置零，导致整个矩阵被置零
    {
        if (matrix[0][i] == 0)
            for (int j = 1; j < rows; j++)
                matrix[j][i] = 0;
    }
    for (int i = 1; i < rows; i++)
    {
        if (matrix[i][0] == 0)
            for (int j = 1; j < cols; j++)
                matrix[i][j] = 0;
    }
    if (flagcol == true)//第一列有0，将第一列置零

        for (int i = 0; i < rows; i++)
            matrix[i][0] = 0;
    if (flagrow == true)
        for (int i = 0; i < cols; i++)
            matrix[0][i] = 0;
}

//找到字符串中首个不重复的元素
int firstUniqChar(string s)
{
    vector<char> words;
    vector<int> counts;
    for (auto c : s)//这一步遍历字符串，用两个数组分别存储元素及其出现次数
    {
        int i;
        int n = words.size();
        for (i = 0; i < n; i++)
        {
            if (c == words[i])
            {
                counts[i]++;
                break;
            }
        }
        if (i == n)
        {
            words.push_back(c);
            counts.push_back(1);
        }
    }
    int i, n = counts.size(), m = s.size();
    for (i = 0; i < n; i++)//遍历counts数组，找到出现次数为1的元素，找不到则返回-1
    {
        if (counts[i] == 1)
        {
            for (int j = 0; j < m; j++)
                if (s[j] == words[i])
                    return j;
        }
    }
    return -1;
}

//ransomeNote可否由magazine构成？（magazine中每个char只可用一次，即绑匪剪杂志来写赎金信）
bool canConstruct(string ransomNote, string magazine)
{
    vector<char> words;
    vector<int> counts;
    for (auto c : magazine)//用数组保存magazine中出现的字符与出现次数
    {
        int i;
        int n = words.size();
        for (i = 0; i < n; i++)
        {
            if (c == words[i])
            {
                counts[i]++;
                break;
            }
        }
        if (i == n)
        {
            words.push_back(c);
            counts.push_back(1);
        }
    }
    int n = ransomNote.size(), m = words.size();
    for (int i = 0; i < n; i++)
    {
        int j;
        for (j = 0; j < m; j++)
        {
            if (ransomNote[i] == words[j] && counts[j] > 0)
            {
                counts[j]--;
                break;
            }
        }
        if (j == m)
            return false;
    }
    return true;
}

//字母异位词
bool isAnagram(string s, string t)
{
    if (s.size() != t.size())
        return false;
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] != t[i])
            return false;
    }
    return true;
}
