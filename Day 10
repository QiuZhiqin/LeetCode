//完美数列（最大值小于最小值*p）的最大个数
int perfect(int size, int p, vector<int> nums)
{
    sort(nums.begin(), nums.end());
    int i, j, maxlen = 0;
    for (i = 0; i < size - 1; i++)
    {
        for (j = i + maxlen; j < size - 1; j++)
        {
            if (nums[j] > nums[i] * p)
                break;
            maxlen++;
        }
    }
    return maxlen;
}
//二叉搜索树的查找
TreeNode *searchBST(TreeNode *root, int val)
{
    if (!root)
        return nullptr;
    if (root->val == val)
        return root;
    if (root->val < val)
        return searchBST(root->right, val);
    else
        return searchBST(root->left, val);
}

//二叉搜索树的插入
class Solution {
public:
    TreeNode *search(TreeNode *root, TreeNode *pre, int val)
{
    if (!root)
        return pre;
    if (root->val < val)
        return search(root->right, root, val);
    else
        return search(root->left, root, val);
}
TreeNode *insertIntoBST(TreeNode *&root, int val)
{
    if (!root)
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        return temp;
    }
    TreeNode *insert = search(root, root, val);
    if (insert->val < val)
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        insert->right = temp;
        return root;
    }
    else
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        insert->left = temp;
        return root;
    }
}
};

//二叉搜索树里的两数之和
class Solution {
public:
    void inorder(TreeNode *root, vector<int> &nums)
{
    if (!root)
        return;
    inorder(root->left, nums);
    nums.push_back(root->val);
    inorder(root->right, nums);
}
bool findTarget(TreeNode *root, int k)
{
    vector<int> nums;
    inorder(root, nums);
    int l = 0, r = nums.size() - 1;
    while (l < r)
    {
        if (nums[l] + nums[r] == k)
            return true;
        else if (nums[l] + nums[r] < k)
            l++;
        else
            r--;
    }
    return false;
}
};

//二叉搜索树的公共祖先
//方法一（分两种情况讨论，麻烦）
class Solution {
public:
   bool searchBST(TreeNode *root, int val)//判断root下是否有val
{
    if (!root)
        return false;
    if (root->val == val)
        return true;
    if (root->val < val)
        return searchBST(root->right, val);
    else
        return searchBST(root->left, val);
}
void commonpos(TreeNode *root, TreeNode *p, TreeNode *q, TreeNode *&common)//递归遍历，若某节点下同时包含pq，修改common，这样可保证返回最后一次修改的值
{
    if (!root)
        return;
    if (searchBST(root, p->val) && searchBST(root, q->val))
        common = root;
    commonpos(root->left, p, q, common);
    commonpos(root->right, p, q, common);
}
TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
{
    if (searchBST(p, q->val))//p是q的父节点？
        return p;
    else if (searchBST(q, p->val))//q是p的父节点？
        return q;
    TreeNode *common = nullptr;
    commonpos(root, p, q, common);//若上两种情况均不满足，说明公共节点在上方，需要从根遍历
    return common;
}
};
//方法二（较优）
TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *p, TreeNode *q)
{
    if (p->val < root->val && q->val < root->val)//若pq值均小于root，说明pq在root的左子树里
        return lowestCommonAncestor(root->left, p, q);
    else if (p->val > root->val && q->val > root->val)
        return lowestCommonAncestor(root->right, p, q);
    else//以上两种情况均不满足，说明pq分别在root两侧，结束返回当前root
        return root;
}
