//完美数列（最大值小于最小值*p）的最大个数
int perfect(int size, int p, vector<int> nums)
{
    sort(nums.begin(), nums.end());
    int i, j, maxlen = 0;
    for (i = 0; i < size - 1; i++)
    {
        for (j = i + maxlen; j < size - 1; j++)
        {
            if (nums[j] > nums[i] * p)
                break;
            maxlen++;
        }
    }
    return maxlen;
}
//二叉搜索树的查找
TreeNode *searchBST(TreeNode *root, int val)
{
    if (!root)
        return nullptr;
    if (root->val == val)
        return root;
    if (root->val < val)
        return searchBST(root->right, val);
    else
        return searchBST(root->left, val);
}

//二叉搜索树的插入
class Solution {
public:
    TreeNode *search(TreeNode *root, TreeNode *pre, int val)
{
    if (!root)
        return pre;
    if (root->val < val)
        return search(root->right, root, val);
    else
        return search(root->left, root, val);
}
TreeNode *insertIntoBST(TreeNode *&root, int val)
{
    if (!root)
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        return temp;
    }
    TreeNode *insert = search(root, root, val);
    if (insert->val < val)
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        insert->right = temp;
        return root;
    }
    else
    {
        TreeNode *temp = new TreeNode;
        temp->val = val;
        insert->left = temp;
        return root;
    }
}
};

//二叉搜索树里的两数之和
class Solution {
public:
    void inorder(TreeNode *root, vector<int> &nums)
{
    if (!root)
        return;
    inorder(root->left, nums);
    nums.push_back(root->val);
    inorder(root->right, nums);
}
bool findTarget(TreeNode *root, int k)
{
    vector<int> nums;
    inorder(root, nums);
    int l = 0, r = nums.size() - 1;
    while (l < r)
    {
        if (nums[l] + nums[r] == k)
            return true;
        else if (nums[l] + nums[r] < k)
            l++;
        else
            r--;
    }
    return false;
}
};
