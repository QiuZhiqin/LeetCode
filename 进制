//输入四个数N1,N2,flag,radix；flag表示输入的是第几个数的radix（进制）
//换算进制范围（1-36），能换算则返回进制，不能则返回impossible
int main()
{
    unordered_map<char, int> m;
    for (char i = '0'; i <= '9'; ++i)
        m[i] = i - '0';
    char i = 'a';
    int j = 10;
    while (i <= 'z')
    {
        m[i] = j;
        ++i;
        ++j;
    }
    vector<string> N(2);
    int flag, n1, n2, a;
    char maxc = '0';
    unsigned long long origin_val = 0, compare_val, radix, radix_ans;
    while (cin >> N[0] >> N[1] >> flag >> radix)
    {
        n1 = N[flag - 1].size() - 1;
        for (const char &c : N[flag - 1])
        {
            origin_val += m[c] * pow(radix, n1);
            --n1;
        }
        a = flag == 1 ? 1 : 0;
        for (const char &c : N[a])
            maxc = max(maxc, c);
        n2 = N[a].size() - 1;
        for (radix_ans = m[maxc] + 1; radix_ans <= 36; ++radix_ans)
        {
            compare_val = 0;
            for (const char &c : N[a])
            {
                compare_val += m[c] * pow(radix_ans, n2);
                --n2;
            }
            if (compare_val == origin_val)
            {
                cout << radix_ans << endl;
                break;
            }
        }
        if (radix_ans == 37)
            cout << "impossible" << endl;
    }
    return 0;
}

//十进制转化为二进制，再将逆序的二进制转化为十进制
#include <iostream>
#include <vector>
using namespace std;
vector<int> multiple(vector<int> number, int x) //超长数的乘法，被乘数以数组形式给出
{
    int carry = 0;                               //进位
    for (int i = number.size() - 1; i >= 0; --i) //从最低位置开始乘
    {
        int current = x * number[i] + carry;
        number[i] = current % 10;
        carry = current / 10; //向上一位进位的值
    }
    if (carry != 0) //如果最后仍有进位，则添加一位最高位，值为1
        number.insert(number.begin(), 1);
    return number;
}
vector<int> add(vector<int> number, int x) //超长数的加法，被加数以数组形式给出
{
    int carry = x;                               //进位
    for (int i = number.size() - 1; i >= 0; --i) //从最低位置开始加
    {
        int current = number[i] + carry;
        number[i] = current % 10;
        carry = current / 10; //向上一位进位的值
    }
    if (carry != 0) //如果最后仍有进位，则添加一位最高位，值为1
        number.insert(number.begin(), 1);
    return number;
}
int main()
{
    string s;
    while (getline(cin, s))
    {
        int size = s.size();
        vector<int> number(size), binary, ans;
        for (int i = 0; i < size; ++i) //将字符串转化为int数组
            number[i] = s[i] - '0';
        for (int i = 0; i < size;) //以下为进制转换
        {
            int remain = 0, temp = 0;
            for (int j = i; j < size; ++j)
            {
                temp = (remain * 10 + number[j]) % 2;
                number[j] = (remain * 10 + number[j]) / 2;
                remain = temp;
            }
            binary.push_back(remain);
            while (number[i] == 0)
                ++i;
        }
        for (int i = 0; i < binary.size(); ++i)
        {
            ans = multiple(ans, 2);
            ans = add(ans, binary[i]);
        }
        for (const int &a : ans)
            cout << a;
        cout << endl;
    }
    return 0;
}
