//判断链表是否有环
bool hasCycle(ListNode *head)
{
    unordered_set<ListNode *> seen;
    ListNode *p = head;
    while (p != NULL && p->next != NULL)
    {
        auto it = seen.find(p);
        if (it != seen.end())
            return true;
        seen.insert(p);
        p = p->next;
    }
    return false;
}

//合并两个有序链表
ListNode *mergeTwoLists(ListNode *list1, ListNode *list2)
{
    ListNode *p = list1, *q = list2;
    ListNode *s = new ListNode(), *r = s;
    s->next = NULL;
    while (p != NULL && q != NULL)
    {
        ListNode *temp = new ListNode();
        if (p->val <= q->val)
        {
            temp->val = p->val;
            temp->next = NULL;
            p = p->next;
        }
        else
        {
            temp->val = q->val;
            temp->next = NULL;
            q = q->next;
        }
        r->next = temp;
        r = r->next;
    }
    if (p == NULL)
    {
        while (q != NULL)
        {
            ListNode *temp = new ListNode();
            temp->val = q->val;
            temp->next = NULL;
            r->next = temp;
            r = r->next;
            q = q->next;
        }
    }
    else if (q == NULL)
    {
        while (p != NULL)
        {
            ListNode *temp = new ListNode();
            temp->val = p->val;
            temp->next = NULL;
            r->next = temp;
            r = r->next;
            p = p->next;
        }
    }
    return s;
}
